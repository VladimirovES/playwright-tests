name: qase_run

on:
  workflow_dispatch:
    inputs:
      qase_api_base_url:
        description: 'Qase API URL'
        required: true
      qase_report:
        description: 'Enabled/disabled reporting to Qase'
        required: true
      qase_project_code:
        description: 'Qase project code'
        required: true
      qase_run_id:
        description: 'Qase Run ID'
        required: true
      qase_run_complete:
        description: 'Qase Run autocomplete'
        required: true
env:
  QASE_API_BASE_URL: ${{ inputs.qase_api_base_url }}
  QASE_REPORT: ${{ inputs.qase_report }}
  QASE_PROJECT_CODE: ${{ inputs.qase_project_code }}
  QASE_RUN_ID: ${{ inputs.qase_run_id }}
  QASE_RUN_COMPLETE: ${{ inputs.qase_run_complete }}
  QASE_API_TOKEN: ${{ secrets.QASE_API_KEY }}

permissions:
  contents: read
  pages: write
  id-token: write


jobs:

  build-php:
    runs-on: ubuntu-latest
    steps:
      - uses: qase-tms/qase-link-run@main
        env:
          QASE_API_TOKEN: ${{ env.QASE_API_TOKEN }}
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: "Set branch env for tests"
        shell: bash
        run: |
          echo "GIT_BRANCH_TESTS=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Set values for trigger env
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "MARKING='regress'" >> $GITHUB_ENV
          echo "BASE_URL='https://demoqa.com/'">> $GITHUB_ENV


      - name: Set  values for other workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "MARKING=${{ github.event.inputs.marking }}" >> $GITHUB_ENV
          echo "BASE_URL=${{ github.event.inputs.base_url }}">> $GITHUB_ENV


      - name: Checkout test code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.GIT_BRANCH_TESTS }}
          path: test-rep

      - name: 'Set name image'
        shell: bash
        run: |
          echo "MY_IMAGE=playwrightimage" >> $GITHUB_ENV


      - name: Build Docker image
        run: docker build test-rep/ -t ${{ env.MY_IMAGE}} -f test-rep/Dockerfile


      - name: "Set allure envs"
        shell: bash
        run: |
          echo "ALLURE_FOLDER=results-${{ env.GIT_BRANCH_TESTS }}" >> $GITHUB_ENV

      - name: "Set test container env"
        shell: bash
        run: |
          echo "TEST_CONTAINER=${{ env.GIT_BRANCH_TESTS }}-test" >> $GITHUB_ENV

      - name: "Run tests"
        run: |
          if [[ -n "$(docker ps -a | grep ${{ env.TEST_CONTAINER }})" ]]; then docker rm -f ${{ env.TEST_CONTAINER }}; fi
          docker run  \
            --name ${{ env.TEST_CONTAINER }}\
            ${{ env.MY_IMAGE }} pytest tests/ --base_url=https://demoqa.com/ --alluredir /playwright-tests/${{ env.ALLURE_FOLDER }}


      - name: "Copy allure results from container"
        if: ${{ always() }}
        run: |
          docker cp ${{ env.TEST_CONTAINER }}:/playwright-tests/${{ env.ALLURE_FOLDER }} ./allure-results


      - name: "Upload Allure results as an artifact"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: allure-results
          path: ./allure-results

  generate-report:
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    name: Generate report
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - run: allure generate -c allure-results -o _site
      - name: Store generated report
        uses: actions/upload-artifact@v3
        with:
          name: _site
          path:
            _site
          retention-days: 1

  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    if: always()
    name: Deploy reports on GitHub Pages
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9

      - name: Add link to job summary
        run: |
          echo '### Отчет Allure' >> $GITHUB_STEP_SUMMARY
          echo '[Открыть отчет Allure](https://vladimiroves.github.io/playwright-tests/)' >> $GITHUB_STEP_SUMMARY


